{"version":3,"file":"static/js/415.38c6e02a.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","components/Services/GetMovie.js","pages/Home.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { ThreeDots } from 'react-loader-spinner';\nimport { LoaderWrapper } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <LoaderWrapper>\n      <ThreeDots\n        height=\"80\"\n        width=\"80\"\n        radius=\"13\"\n        color=\"white\"\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"\"\n        visible={true}\n      />\n    </LoaderWrapper>\n  );\n};\n\nexport default Loader;\n","import styled from '@emotion/styled';\n\nexport const ListContainer = styled.div``;\n\nexport const ListText = styled.h2`\n  color: white;\n  margin-bottom: 20px;\n  font-size: 18px;\n  font-family: 'Montserrat', sans-serif;\n`;\n\nexport const ListItem = styled.ul`\n  text-align: center;\n\n  grid-gap: 20px;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n`;\n\nexport const Image = styled.img`\n  transition: transform 0.3s ease-in-out;\n  border-radius: 5px;\n\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\nexport const ListTitle = styled.h1`\n  text-align: center;\n  margin-bottom: 20px;\n  margin-top: 20px;\n  font-family: 'Montserrat', sans-serif;\n  line-height: 1.4;\n`;\n\nexport const List = styled.li`\n  padding: 20px;\n  border-radius: 10px;\n  border: 1px solid white;\n  &:hover {\n    border: 1px solid yellow;\n  }\n`;\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  ListContainer,\n  ListItem,\n  ListText,\n  Image,\n  List,\n} from './MovieList.styled';\n\nexport const MovieList = ({ items }) => {\n  return (\n    <ListContainer>\n      <ListItem>\n        {items.map(item => (\n          <List key={item.id}>\n            <ListText>{item.title}</ListText>\n            <Link to={`/movies/${item.id}`}>\n              <Image\n                src={`https://image.tmdb.org/t/p/w200${item.poster_path}`}\n                alt={item.title}\n              />\n            </Link>\n          </List>\n        ))}\n      </ListItem>\n    </ListContainer>\n  );\n};\nMovieList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = '5aaf87e447efebf6d5c12466ddbc5de2';\n\nexport const GetMovieHome = async () => {\n  const response = await axios.get(`${BASE_URL}/3/trending/movie/day?`, {\n    params: {\n      api_key: API_KEY,\n      page: 1,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nexport const GetFullInfoMovie = async id => {\n  const response = await axios.get(`${BASE_URL}/3/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nexport const GetCast = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const GetReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data.results;\n};\n\nexport const GetMoviesBySearch = async (query, page) => {\n  const response = await axios.get(\n    `${BASE_URL}/3/search/movie?api_key=${API_KEY}&query=${query}'&page=${page}&language=en-US&include_adult=false`\n  );\n  return response.data;\n};\n","import styled from '@emotion/styled';\nimport { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { GetMovieHome } from 'components/Services/GetMovie';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport Loader from 'components/Loader';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const [error, setError] = useState(null);\n  const location = useLocation();\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    const fetchMovies = async () => {\n      setStatus('loading');\n      try {\n        const response = await GetMovieHome(abortController);\n        setMovies(response.results);\n        setStatus('success');\n      } catch (error) {\n        setError(error);\n        setStatus('error');\n      }\n    };\n    fetchMovies();\n    return () => {\n      abortController.abort();\n    };\n  }, []);\n\n  if (status === 'idle' || status === 'loading') {\n    return <Loader />;\n  }\n\n  if (status === 'error') {\n    console.log(error.message);\n    return <div>Error: {error.message}</div>;\n  }\n\n  return (\n    <Container>\n      <Text>Trending Movies</Text>\n      <MovieList items={movies} state={{ from: location }} />\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1200;\n  padding: 0 15px;\n`;\n\nconst Text = styled.h1`\n  text-align: center;\n  margin-bottom: 20px;\n  margin-top: 20px;\n  font-family: 'Montserrat', sans-serif;\n  line-height: 1.4;\n`;\nexport default Home;\n"],"names":["LoaderWrapper","styled","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","ListContainer","ListText","ListItem","Image","List","MovieList","items","map","item","title","to","id","src","poster_path","alt","BASE_URL","API_KEY","GetMovieHome","axios","params","api_key","page","language","response","data","GetFullInfoMovie","GetCast","cast","GetReviews","results","GetMoviesBySearch","query","Container","Text","useState","movies","setMovies","status","setStatus","error","setError","location","useLocation","useEffect","abortController","AbortController","fetchMovies","abort","console","log","message","state","from"],"sourceRoot":""}