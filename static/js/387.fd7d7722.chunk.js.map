{"version":3,"file":"static/js/387.fd7d7722.chunk.js","mappings":"gMAEaA,E,QAAgBC,GAAAA,IAAH,8F,SCkB1B,EAjBe,WACb,OACE,SAACD,EAAD,WACE,SAAC,KAAD,CACEE,OAAO,KACPC,MAAM,KACNC,OAAO,KACPC,MAAM,QACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,iBAAiB,GACjBC,SAAS,KAIhB,C,0OCjBYC,EAAYT,EAAAA,EAAAA,IAAH,qFAKTU,EAASV,EAAAA,EAAAA,GAAH,+KASNW,EAAOX,EAAAA,EAAAA,EAAH,kI,mBCsDjB,EA/DgB,WACd,OAAoCY,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAA4BN,EAAAA,EAAAA,UAAS,QAArC,eAAOO,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA0BR,OAxBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,IAAIC,gBACtBC,EAAiB,mCAAG,2FACxBN,EAAU,WACVJ,GAAW,GAFa,mBAKCW,EAAAA,EAAAA,IAAWN,GALZ,OAKhBO,EALgB,OAMtBd,EAAcc,GACdR,EAAU,WAPY,kDAStBF,EAAS,EAAD,IACRE,EAAU,SAVY,QAaxBJ,GAAW,GAba,0DAAH,qDAiBvB,OADAU,IACO,WACLF,EAAgBK,OACjB,CACF,GAAE,CAACR,IAEW,SAAXF,EACK,KAGM,YAAXA,GAAwBJ,GACnB,SAACe,EAAA,EAAD,IAGM,UAAXX,GACK,qCAAaF,EAAMc,WAGF,IAAtBlB,EAAWmB,QAA2B,YAAXb,GACtB,SAACR,EAAD,gEAIP,SAACF,EAAD,UACGI,EAAWoB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACd,0BACE,yBACE,2BACE,UAAC1B,EAAD,sBAAiByB,MACjB,SAACxB,EAAD,UAAOyB,UAJHF,EADI,KAYrB,C,iMCjEKG,EAAW,8BACXC,EAAU,mCAEHC,EAAY,mCAAG,oGACHC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,0BAA+C,CACpEI,OAAQ,CACNC,QAASJ,EACTK,KAAM,EACNC,SAAU,WALY,cACpBhB,EADoB,yBAQnBA,EAASiB,MARU,2CAAH,qDAWZC,EAAgB,mCAAG,WAAMZ,GAAN,uFACPM,EAAAA,EAAAA,IAAA,UAAaH,EAAb,oBAAiCH,GAAM,CAC5DO,OAAQ,CACNC,QAASJ,EACTM,SAAU,WAJgB,cACxBhB,EADwB,yBAOvBA,EAASiB,MAPc,2CAAH,sDAUhBE,EAAO,mCAAG,WAAMb,GAAN,uFACEM,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACEH,EADF,4BACwBI,EADxB,oBADF,cACfV,EADe,yBAIdA,EAASiB,KAAKG,MAJA,2CAAH,sDAOPrB,EAAU,mCAAG,WAAMO,GAAN,uFACDM,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACEH,EADF,4BACwBI,EADxB,oBADC,cAClBV,EADkB,yBAKjBA,EAASiB,KAAKI,SALG,2CAAH,sDAQVC,EAAiB,mCAAG,WAAOC,EAAOR,GAAd,uFACRH,EAAAA,EAAAA,IAAA,UAClBH,EADkB,mCACiBC,EADjB,kBACkCa,EADlC,kBACiDR,EADjD,wCADQ,cACzBf,EADyB,yBAIxBA,EAASiB,MAJe,2CAAH,uD","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","components/Services/GetMovie.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { ThreeDots } from 'react-loader-spinner';\nimport { LoaderWrapper } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <LoaderWrapper>\n      <ThreeDots\n        height=\"80\"\n        width=\"80\"\n        radius=\"13\"\n        color=\"white\"\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"\"\n        visible={true}\n      />\n    </LoaderWrapper>\n  );\n};\n\nexport default Loader;\n","import styled from '@emotion/styled';\nexport const Container = styled.div`\n  max-width: 1200px;\n  margin-top: 20px;\n  padding: 10px;\n`;\nexport const Author = styled.h2`\n  font-family: 'Montserrat', sans-serif;\n  line-height: 1.4;\n  font-size: 26px;\n  font-weight: 600px;\n  margin-bottom: 20px;\n  margin-top: 20px;\n`;\n\nexport const Text = styled.p`\n  font-family: 'Montserrat', sans-serif;\n  line-height: 1.5;\n  font-size: 20px;\n  font-weight: 400px;\n`;\n","import { useState, useEffect } from 'react';\nimport { GetReviews } from 'components/Services/GetMovie';\nimport { useParams } from 'react-router-dom';\nimport { Container, Author, Text } from './Reviews.styled';\nimport Loader from 'components/Loader';\n\nconst Reviews = () => {\n  const [reviewList, setReviewList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('idle');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    const fetchMovieReviews = async () => {\n      setStatus('loading');\n      setLoading(true);\n\n      try {\n        const response = await GetReviews(movieId);\n        setReviewList(response);\n        setStatus('success');\n      } catch (error) {\n        setError(error);\n        setStatus('error');\n      }\n\n      setLoading(false);\n    };\n\n    fetchMovieReviews();\n    return () => {\n      abortController.abort();\n    };\n  }, [movieId]);\n\n  if (status === 'idle') {\n    return null;\n  }\n\n  if (status === 'loading' && loading) {\n    return <Loader />;\n  }\n\n  if (status === 'error') {\n    return <div>Error: {error.message}</div>;\n  }\n\n  if (reviewList.length === 0 && status === 'success') {\n    return <Text>Sorry, we don't have any reviews for this movie.</Text>;\n  }\n\n  return (\n    <Container>\n      {reviewList.map(({ id, author, content }) => (\n        <div key={id}>\n          <ul>\n            <li>\n              <Author>Author: {author}</Author>\n              <Text>{content}</Text>\n            </li>\n          </ul>\n        </div>\n      ))}\n    </Container>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = '5aaf87e447efebf6d5c12466ddbc5de2';\n\nexport const GetMovieHome = async () => {\n  const response = await axios.get(`${BASE_URL}/3/trending/movie/day?`, {\n    params: {\n      api_key: API_KEY,\n      page: 1,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nexport const GetFullInfoMovie = async id => {\n  const response = await axios.get(`${BASE_URL}/3/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nexport const GetCast = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const GetReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data.results;\n};\n\nexport const GetMoviesBySearch = async (query, page) => {\n  const response = await axios.get(\n    `${BASE_URL}/3/search/movie?api_key=${API_KEY}&query=${query}'&page=${page}&language=en-US&include_adult=false`\n  );\n  return response.data;\n};\n"],"names":["LoaderWrapper","styled","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","Container","Author","Text","useState","reviewList","setReviewList","loading","setLoading","error","setError","status","setStatus","movieId","useParams","useEffect","abortController","AbortController","fetchMovieReviews","GetReviews","response","abort","Loader","message","length","map","id","author","content","BASE_URL","API_KEY","GetMovieHome","axios","params","api_key","page","language","data","GetFullInfoMovie","GetCast","cast","results","GetMoviesBySearch","query"],"sourceRoot":""}