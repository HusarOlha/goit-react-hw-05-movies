{"version":3,"file":"static/js/387.2e5cdcfb.chunk.js","mappings":"gMAEaA,E,QAAgBC,GAAAA,IAAH,8F,SCkB1B,EAjBe,WACb,OACE,SAACD,EAAD,WACE,SAAC,KAAD,CACEE,OAAO,KACPC,MAAM,KACNC,OAAO,KACPC,MAAM,QACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,iBAAiB,GACjBC,SAAS,KAIhB,C,0OCjBYC,EAAYT,EAAAA,EAAAA,IAAH,qFAKTU,EAASV,EAAAA,EAAAA,GAAH,+KASNW,EAAOX,EAAAA,EAAAA,EAAH,kI,mBCkDjB,EA3DgB,WACd,OAAoCY,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAA4BN,EAAAA,EAAAA,UAAS,QAArC,eAAOO,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAsBR,OApBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,2FACxBJ,EAAU,WACVJ,GAAW,GAFa,mBAKCS,EAAAA,EAAAA,IAAWJ,GALZ,OAKhBK,EALgB,OAMtBZ,EAAcY,GACdN,EAAU,WAPY,kDAStBF,EAAS,EAAD,IACRE,EAAU,SAVY,QAaxBJ,GAAW,GAba,0DAAH,qDAgBvBQ,GACD,GAAE,CAACH,IAEW,SAAXF,EACK,KAGM,YAAXA,GAAwBJ,GACnB,SAACY,EAAA,EAAD,IAGM,UAAXR,GACK,qCAAaF,EAAMW,WAGF,IAAtBf,EAAWgB,QAA2B,YAAXV,GACtB,SAACR,EAAD,gEAIP,SAACF,EAAD,UACGI,EAAWiB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACd,0BACE,yBACE,2BACE,UAACvB,EAAD,sBAAiBsB,MACjB,SAACrB,EAAD,UAAOsB,UAJHF,EADI,KAYrB,C,iMC7DKG,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAiB,mCAAG,oGACRD,EAAAA,EAAAA,IAAA,qCAAwCD,IADhC,cACzBR,EADyB,yBAExBA,EAASW,MAFe,2CAAH,qDAIjBC,EAAiB,mCAAG,WAAOC,EAAOC,GAAd,uFACRL,EAAAA,EAAAA,IAAA,+BACGD,EADH,kBACoBK,EADpB,kBACmCC,EADnC,yBADQ,cACzBd,EADyB,yBAIxBA,EAASW,MAJe,2CAAH,wDAOjBI,EAAgB,mCAAG,WAAMV,GAAN,uFACPI,EAAAA,EAAAA,IAAA,gBACZJ,EADY,oBACEG,EADF,oBADO,cACxBR,EADwB,yBAIvBA,EAASW,MAJc,2CAAH,sDAOhBK,EAAO,mCAAG,WAAMX,GAAN,uFACEI,EAAAA,EAAAA,IAAA,gBACZJ,EADY,4BACUG,EADV,oBADF,cACfR,EADe,yBAIdA,EAASW,KAAKM,MAJA,2CAAH,sDAOPlB,EAAU,mCAAG,WAAMM,GAAN,uFACDI,EAAAA,EAAAA,IAAA,gBACZJ,EADY,4BACUG,EADV,oBADC,cAClBR,EADkB,yBAIjBA,EAASW,KAAKO,SAJG,2CAAH,qD","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","components/Services/GetMovie.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { ThreeDots } from 'react-loader-spinner';\nimport { LoaderWrapper } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <LoaderWrapper>\n      <ThreeDots\n        height=\"80\"\n        width=\"80\"\n        radius=\"13\"\n        color=\"white\"\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"\"\n        visible={true}\n      />\n    </LoaderWrapper>\n  );\n};\n\nexport default Loader;\n","import styled from '@emotion/styled';\nexport const Container = styled.div`\n  max-width: 1200px;\n  margin-top: 20px;\n  padding: 10px;\n`;\nexport const Author = styled.h2`\n  font-family: 'Montserrat', sans-serif;\n  line-height: 1.4;\n  font-size: 26px;\n  font-weight: 600px;\n  margin-bottom: 20px;\n  margin-top: 20px;\n`;\n\nexport const Text = styled.p`\n  font-family: 'Montserrat', sans-serif;\n  line-height: 1.5;\n  font-size: 20px;\n  font-weight: 400px;\n`;\n","import { useState, useEffect } from 'react';\nimport { GetReviews } from 'components/Services/GetMovie';\nimport { useParams } from 'react-router-dom';\nimport { Container, Author, Text } from './Reviews.styled';\nimport Loader from 'components/Loader';\n\nconst Reviews = () => {\n  const [reviewList, setReviewList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('idle');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      setStatus('loading');\n      setLoading(true);\n\n      try {\n        const response = await GetReviews(movieId);\n        setReviewList(response);\n        setStatus('success');\n      } catch (error) {\n        setError(error);\n        setStatus('error');\n      }\n\n      setLoading(false);\n    };\n\n    fetchMovieReviews();\n  }, [movieId]);\n\n  if (status === 'idle') {\n    return null;\n  }\n\n  if (status === 'loading' && loading) {\n    return <Loader />;\n  }\n\n  if (status === 'error') {\n    return <div>Error: {error.message}</div>;\n  }\n\n  if (reviewList.length === 0 && status === 'success') {\n    return <Text>Sorry, we don't have any reviews for this movie.</Text>;\n  }\n\n  return (\n    <Container>\n      {reviewList.map(({ id, author, content }) => (\n        <div key={id}>\n          <ul>\n            <li>\n              <Author>Author: {author}</Author>\n              <Text>{content}</Text>\n            </li>\n          </ul>\n        </div>\n      ))}\n    </Container>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '5aaf87e447efebf6d5c12466ddbc5de2';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const GetTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\nexport const GetMoviesBySearch = async (query, page) => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}'&page=${page}&include_adult=false`\n  );\n  return response.data;\n};\n\nexport const GetFullInfoMovie = async id => {\n  const response = await axios.get(\n    `movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const GetCast = async id => {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const GetReviews = async id => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.results;\n};\n\n// export const GetFullInfoMovie = async id => {\n//   const response = await axios.get(`${BASE_URL}/3/movie/${id}`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: 'en-US',\n//     },\n//   });\n//   return response.data;\n// };\n\n// export const GetCast = async id => {\n//   const response = await axios.get(\n//     `${BASE_URL}/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n//   );\n//   return response.data.cast;\n// };\n\n// export const GetReviews = async id => {\n//   const response = await axios.get(\n//     `${BASE_URL}/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n//   );\n\n//   return response.data.results;\n// };\n\n// export const GetMoviesBySearch = async (query, page) => {\n//   const response = await axios.get(\n//     `${BASE_URL}/3/search/movie?api_key=${API_KEY}&query=${query}&page=${page}&language=en-US&include_adult=false`\n//   );\n//   return response.data;\n// };\n"],"names":["LoaderWrapper","styled","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","Container","Author","Text","useState","reviewList","setReviewList","loading","setLoading","error","setError","status","setStatus","movieId","useParams","useEffect","fetchMovieReviews","GetReviews","response","Loader","message","length","map","id","author","content","API_KEY","axios","GetTrendingMovies","data","GetMoviesBySearch","query","page","GetFullInfoMovie","GetCast","cast","results"],"sourceRoot":""}