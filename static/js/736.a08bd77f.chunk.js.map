{"version":3,"file":"static/js/736.a08bd77f.chunk.js","mappings":"wRAEaA,EAAgBC,EAAAA,EAAAA,IAAH,mJAObC,EAAOD,EAAAA,EAAAA,EAAH,8KASJE,EAAYF,EAAAA,EAAAA,EAAH,uJAQTG,EAAQH,EAAAA,EAAAA,IAAH,wMAWLI,EAAOJ,EAAAA,EAAAA,IAAH,uK,mBCyBjB,EAxDa,WACX,OAAwBK,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAsBR,OApBAE,EAAAA,EAAAA,YAAU,WACRL,GAAW,GACX,IAAMM,EAAkB,IAAIC,gBACtBC,EAAc,mCAAG,8GAEIC,EAAAA,EAAAA,IAAQN,GAFZ,OAEbO,EAFa,OAGnBZ,EAAQY,GACRV,GAAW,GAJQ,gDAMnBE,EAAS,EAAD,IACRF,GAAW,GAPQ,yDAAH,qDAYpB,OADAQ,IACO,WACLF,EAAgBK,OACjB,CACF,GAAE,CAACR,IAEAJ,GACK,SAACa,EAAA,EAAD,IAGLX,GACK,qCAAaA,EAAMY,YAI1B,SAACvB,EAAD,UACGO,EAAKiB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACR,UAACvB,EAAD,YACE,SAACD,EAAD,CACEyB,IACED,EAAY,6CAC8BA,GACtC,uIAENE,IAAKJ,EACLK,MAAM,QACNC,OAAO,WAET,SAAC9B,EAAD,UAAOwB,KACP,UAACvB,EAAD,yBAAuBwB,OAZdF,EADH,KAkBf,C,gFC1DYQ,E,QAAgBhC,GAAAA,IAAH,8F,SCkB1B,EAjBe,WACb,OACE,SAACgC,EAAD,WACE,SAAC,KAAD,CACED,OAAO,KACPD,MAAM,KACNG,OAAO,KACPC,MAAM,QACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,iBAAiB,GACjBC,SAAS,KAIhB,C,iMChBKC,EAAW,8BACXC,EAAU,mCAEHC,EAAY,mCAAG,oGACHC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,0BAA+C,CACpEI,OAAQ,CACNC,QAASJ,EACTK,KAAM,EACNC,SAAU,WALY,cACpB3B,EADoB,yBAQnBA,EAAS4B,MARU,2CAAH,qDAWZC,EAAgB,mCAAG,WAAMxB,GAAN,uFACPkB,EAAAA,EAAAA,IAAA,UAAaH,EAAb,oBAAiCf,GAAM,CAC5DmB,OAAQ,CACNC,QAASJ,EACTM,SAAU,WAJgB,cACxB3B,EADwB,yBAOvBA,EAAS4B,MAPc,2CAAH,sDAUhB7B,EAAO,mCAAG,WAAMM,GAAN,uFACEkB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACEf,EADF,4BACwBgB,EADxB,oBADF,cACfrB,EADe,yBAIdA,EAAS4B,KAAKE,MAJA,2CAAH,sDAOPC,EAAU,mCAAG,WAAM1B,GAAN,uFACDkB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACEf,EADF,4BACwBgB,EADxB,oBADC,cAClBrB,EADkB,yBAKjBA,EAAS4B,KAAKI,SALG,2CAAH,sDAQVC,EAAiB,mCAAG,WAAOC,EAAOR,GAAd,uFACRH,EAAAA,EAAAA,IAAA,UAClBH,EADkB,mCACiBC,EADjB,kBACkCa,EADlC,kBACiDR,EADjD,wCADQ,cACzB1B,EADyB,yBAIxBA,EAAS4B,MAJe,2CAAH,uD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/Services/GetMovie.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 30px;\n  margin-top: 40px;\n`;\n\nexport const Name = styled.p`\n  font-family: 'Montserrat', sans-serif;\n  line-height: 1.4;\n  font-size: 20px;\n  font-weight: 400px;\n  text-align: center;\n  margin-top: 10px;\n`;\n\nexport const Character = styled.p`\n  font-family: 'Montserrat', sans-serif;\n  line-height: 1.4;\n  font-size: 16px;\n  margin-top: 10px;\n  text-align: center;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  border-radius: 15px;\n  margin: 0 auto;\n  justify-self: center;\n  transition: transform 0.3s ease-in-out;\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n\nexport const Card = styled.div`\n  border: 1px solid white;\n  min-height: 100px;\n  padding: 15px;\n  border-radius: 15px;\n\n  &:hover {\n    border: 1px solid yellow;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { GetCast } from 'components/Services/GetMovie';\nimport { useParams } from 'react-router-dom';\nimport { CastContainer, Name, Character, Image, Card } from './Cast.styled';\nimport Loader from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const [card, setCard] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    const abortController = new AbortController();\n    const fetchMovieCast = async () => {\n      try {\n        const response = await GetCast(movieId);\n        setCard(response);\n        setLoading(false);\n      } catch (error) {\n        setError(error);\n        setLoading(false);\n      }\n    };\n\n    fetchMovieCast();\n    return () => {\n      abortController.abort();\n    };\n  }, [movieId]);\n\n  if (loading) {\n    return <Loader></Loader>;\n  }\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  return (\n    <CastContainer>\n      {card.map(({ id, name, character, profile_path }) => (\n        <Card key={id}>\n          <Image\n            src={\n              profile_path\n                ? `https://image.tmdb.org/t/p/original${profile_path}`\n                : 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSgxr1R7VtfzTnb7T1xo3RWbgrPNbf3RgvJ63abVkeyzxq1gLGb50lacEnZof8bSf4h4Ww&usqp=CAU'\n            }\n            alt={name}\n            width=\"176px\"\n            height=\"264px\"\n          />\n          <Name>{name}</Name>\n          <Character>Character: {character}</Character>\n        </Card>\n      ))}\n    </CastContainer>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { ThreeDots } from 'react-loader-spinner';\nimport { LoaderWrapper } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <LoaderWrapper>\n      <ThreeDots\n        height=\"80\"\n        width=\"80\"\n        radius=\"13\"\n        color=\"white\"\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"\"\n        visible={true}\n      />\n    </LoaderWrapper>\n  );\n};\n\nexport default Loader;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = '5aaf87e447efebf6d5c12466ddbc5de2';\n\nexport const GetMovieHome = async () => {\n  const response = await axios.get(`${BASE_URL}/3/trending/movie/day?`, {\n    params: {\n      api_key: API_KEY,\n      page: 1,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nexport const GetFullInfoMovie = async id => {\n  const response = await axios.get(`${BASE_URL}/3/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data;\n};\n\nexport const GetCast = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const GetReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data.results;\n};\n\nexport const GetMoviesBySearch = async (query, page) => {\n  const response = await axios.get(\n    `${BASE_URL}/3/search/movie?api_key=${API_KEY}&query=${query}'&page=${page}&language=en-US&include_adult=false`\n  );\n  return response.data;\n};\n"],"names":["CastContainer","styled","Name","Character","Image","Card","useState","card","setCard","loading","setLoading","error","setError","movieId","useParams","useEffect","abortController","AbortController","fetchMovieCast","GetCast","response","abort","Loader","message","map","id","name","character","profile_path","src","alt","width","height","LoaderWrapper","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","BASE_URL","API_KEY","GetMovieHome","axios","params","api_key","page","language","data","GetFullInfoMovie","cast","GetReviews","results","GetMoviesBySearch","query"],"sourceRoot":""}